#!/usr/bin/env perl

use strict;
use warnings;

sub usage() {
	print STDERR "Usage: ".__FILE__." REGION_FILENAME X Z\n";
	exit 1;
}

my $filename = shift @ARGV;
usage if ! defined $filename;

my $x = shift @ARGV;
usage if ! defined $x;
die "Error: Invalid value of X: $x" if $x < 0 || $x > 31;

my $z = shift @ARGV;
usage if ! defined $z;
die "Error: Invalid value of Z: $z" if $z < 0 || $z > 31;

#

open my $fh, "<", $filename or die;
binmode $fh;

#

sub read_data($) {
	my $size = shift;
	if ($size == 0) {
		return "";
	} else {

		my $buffer;
		my $result = read($fh, $buffer, $size);

		die "Can not read from file: $filename" if $result == 0;
		die "Can not read from file: $filename" if ! defined $result;

		return $buffer;
	}
}

sub read_byte() {
	return unpack("c", read_data(1));
}

sub read_int() {
	return unpack("l>", read_data(4));
}

#

my $index = $x + $z * 32;
#print STDERR "index: $index\n";

seek $fh, $index * 4, 0 or die;

my $offset = read_int();
#print STDERR "offset: $offset\n";

if ($offset == 0) {
	print "null\n";
	exit 0;
}

my $sector_index = $offset >> 8;
#print STDERR "sector_index: $sector_index\n";

my $sector_length = $offset & 255;
#print STDERR "sector_length: $sector_length\n";

seek $fh, $sector_index * 4096, 0 or die;
#print STDERR "seek: ", $sector_index * 4096, "\n";

my $length = read_int();
#print STDERR "length: $length\n";

my $format = read_byte();
#print STDERR "format: $format\n";

print "$format\n";
exit $format;
