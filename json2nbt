#!/usr/bin/env perl

use strict;
use warnings;
use utf8;
use Encode;
use Data::Dumper;
use JSON;

#

sub usage(*$) {
	my $fh = shift;
	my $code = shift;
	print $fh "Usage: ".__FILE__." [OPTIONS...]\n";
	print $fh "OPTION:\n";
	print $fh "\t\t--help\n";
	print $fh "\t\t--type-key\n";
	print $fh "\t-c,\t--readable-compound\n";
	exit $code;
}

my $type_key = 0;

my @short_options;
sub arg($) {
	if ($#short_options == -1 && $#ARGV > -1 && $ARGV[0] eq $_[0]) {
		shift @ARGV;
		return 1;
	}
	return 0;
}
sub sarg($) {
	if ($#short_options > -1 && $short_options[0] eq $_[0]) {
		shift @short_options;
		return 1;
	}
	return 0;
}
while ($#ARGV > -1 || $#short_options > -1) {

	if ($#short_options == -1 && $ARGV[0] =~ /^-([a-zA-Z0-9]+)$/) {
		shift @ARGV;
		@short_options = split //, $1;
		next;
	}

	if (arg "--help") {
		usage *STDOUT, 0;
		next;
	}

	if (arg "--type-key") {
		$type_key = 1;
		next;
	}

	if (sarg "c" || arg "--readable-compound") {
		$type_key = 1;
		next;
	}

	usage *STDERR, 1;
}

#

my %types = (
	0 => ["end", "N", 0],
	1 => ["byte", "B", \&write_byte],
	2 => ["short", "S", \&write_short],
	3 => ["int", "I", \&write_int],
	4 => ["long", "L", \&write_long],
	5 => ["float", "F", \&write_float],
	6 => ["double", "D", \&write_double],
	7 => ["byte_array", "b", \&write_byte_array],
	8 => ["string", "T", \&write_string],
	9 => ["list", "A", \&write_list],
	10 => ["compound", "C", \&write_compound],
	11 => ["int_array", "i", \&write_int_array],
	12 => ["long_array", "l", \&write_long_array],
);

sub convert_type($) {
	for (keys %types) {
		if ($types{$_}->[0] eq $_[0]) {
			$_[0] = $_;
		}
		if ($types{$_}->[1] eq $_[0]) {
			$_[0] = $_;
		}
	}
	return $_[0];
}

sub write_data($) {
	print($_[0]);
}

sub write_integer_1($) {
	write_data(pack("c", $_[0]));
}

sub write_integer_2($) {
	write_data(pack("s>", $_[0]));
}

sub write_integer_4($) {
	write_data(pack("l>", $_[0]));
}

sub write_byte($) {
	if (! ref $_[0]) {
		if ($_[0] =~ /\A0x([0-9a-zA-Z]{2})(?:=|\z)/) {
			write_data(pack("H*", $1));
			return;
		}
		if ($_[0] =~ /\A0b([0-9a-zA-Z]{8})(?:=|\z)/) {
			write_data(pack("B*", $1));
			return;
		}
		if ($_[0] =~ /\A([0-9a-zA-Z+\-.]*)(?:=|\z)/) {
			write_data(pack("c", $1));
			return;
		}
	}
	die "Illegal format";
}

sub write_short($) {
	if (! ref $_[0]) {
		if ($_[0] =~ /\A0x([0-9a-zA-Z]{4})(?:=|\z)/) {
			write_data(pack("H*", $1));
			return;
		}
		if ($_[0] =~ /\A0b([0-9a-zA-Z]{16})(?:=|\z)/) {
			write_data(pack("B*", $1));
			return;
		}
		if ($_[0] =~ /\A([0-9a-zA-Z+\-.]*)(?:=|\z)/) {
			write_data(pack("s>", $1));
			return;
		}
	}
	die "Illegal format";
}

sub write_int($) {
	if (! ref $_[0]) {
		if ($_[0] =~ /\A0x([0-9a-zA-Z]{8})(?:=|\z)/) {
			write_data(pack("H*", $1));
			return;
		}
		if ($_[0] =~ /\A0b([0-9a-zA-Z]{32})(?:=|\z)/) {
			write_data(pack("B*", $1));
			return;
		}
		if ($_[0] =~ /\A([0-9a-zA-Z+\-.]*)(?:=|\z)/) {
			write_data(pack("l>", $1));
			return;
		}
	}
	die "Illegal format";
}

sub write_long($) {
	if (! ref $_[0]) {
		if ($_[0] =~ /\A0x([0-9a-zA-Z]{16})(?:=|\z)/) {
			write_data(pack("H*", $1));
			return;
		}
		if ($_[0] =~ /\A0b([0-9a-zA-Z]{64})(?:=|\z)/) {
			write_data(pack("B*", $1));
			return;
		}
		if ($_[0] =~ /\A([0-9a-zA-Z+\-.]*)(?:=|\z)/) {
			write_data(pack("q>", $1));
			return;
		}
	}
	die "Illegal format";
}

sub write_float($) {
	if (! ref $_[0]) {
		if ($_[0] =~ /\A0x([0-9a-zA-Z]{8})(?:=|\z)/) {
			write_data(pack("H*", $1));
			return;
		}
		if ($_[0] =~ /\A0b([0-9a-zA-Z]{32})(?:=|\z)/) {
			write_data(pack("B*", $1));
			return;
		}
		if ($_[0] =~ /\A([0-9a-zA-Z+\-.]*)(?:=|\z)/) {
			write_data(pack("f>", $1));
			return;
		}
	}
	die "Illegal format";
}

sub write_double($) {
	if (! ref $_[0]) {
		if ($_[0] =~ /\A0x([0-9a-zA-Z]{16})(?:=|\z)/) {
			write_data(pack("H*", $1));
			return;
		}
		if ($_[0] =~ /\A0b([0-9a-zA-Z]{64})(?:=|\z)/) {
			write_data(pack("B*", $1));
			return;
		}
		if ($_[0] =~ /\A([0-9a-zA-Z+\-.]*)(?:=|\z)/) {
			write_data(pack("d>", $1));
			return;
		}
	}
	die "Illegal format";
}

sub write_byte_array($) {
	write_integer_4($#{$_[0]} + 1);
	write_byte($_) for @{$_[0]};
}

sub write_string($) {
	my $data = encode("utf8", $_[0]);
	write_integer_2(length($data));
	write_data($data);
}

sub write_list($) {
	$_[0]->{type} = convert_type($_[0]->{type});
	write_integer_1($_[0]->{type});
	write_integer_4($#{$_[0]->{values}} + 1);
	write_payload($_[0]->{type}, $_) for @{$_[0]->{values}};
}

sub write_compound($) {
	if (ref($_[0]) eq "ARRAY") {
		write_entry($_) for @{$_[0]};
	} elsif ($type_key && ref($_[0]) eq "HASH") {
		for (sort keys %{$_[0]}) {
			die "Illegal key name: ".$_ if length($_) == 0;
			write_entry({
				"type" => substr($_, 0, 1),
				"key" => $_,
				"value" => $_[0]->{$_},
			});
		}
	} else {
		die "Illegal compound value";
	}
	write_integer_1(0);
}

sub write_entry($) {
	$_[0]->{type} = convert_type($_[0]->{type});
	write_integer_1($_[0]->{type});
	if ($type_key) {
		die "Illegal key name: ".$_[0]->{key} if length($_[0]->{key}) == 0;
		write_string(substr($_[0]->{key}, 1));
	} else {
		write_string($_[0]->{key});
	}
	write_payload($_[0]->{type}, $_[0]->{value});
}

sub write_int_array($) {
	write_integer_4($#{$_[0]} + 1);
	write_int($_) for @{$_[0]};
}

sub write_long_array($) {
	write_integer_4($#{$_[0]} + 1);
	write_long($_) for @{$_[0]};
}

sub write_payload($$) {
	my $type = shift;
	my $value = shift;
	my $a = $types{$type};
	die "Unknown Type: $type" if ! defined $a;
	return $a->[2]($value);
}

#

binmode STDOUT;
my $json = JSON->new->utf8;
write_entry($json->decode(do {
	local $/;
	<>;
}));
