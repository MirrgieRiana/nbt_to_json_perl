#!/usr/bin/env perl

use strict;
use warnings;
use utf8;
use Encode;
use Data::Dumper;
use JSON;

#

sub usage(*$) {
	my $fh = shift;
	my $code = shift;
	print $fh "Usage: ".__FILE__." [OPTIONS...]\n";
	print $fh "OPTION:\n";
	print $fh "\t\t--help\n";
	print $fh "\t-p,\t--pretty\n";
	print $fh "\t\t--root-name\n";
	print $fh "\t\t--type-name\n";
	print $fh "\t\t--type-key\n";
	print $fh "\t\t--flat-compound\n";
	print $fh "\t\t--flat-root\n";
	print $fh "\t\t--flat-list\n";
	print $fh "\t\t--hex-integer\n";
	print $fh "\t\t--hex-float\n";
	print $fh "\t\t--bin-integer\n";
	print $fh "\t\t--bin-float\n";
	print $fh "\t-e,\t--eval PROGRAM\n";
	print $fh "\t-r,\t--readable\n";
	print $fh "\t-H,\t--hex\n";
	print $fh "\t-B,\t--bin\n";
	print $fh "\t-c,\t--readable-compound\n";
	exit $code;
}

my $pretty = 0;
my $root_name = 0;
my $type_name = 0;
my $type_key = 0;
my $flat_compound = 0;
my $flat_root = 0;
my $flat_list = 0;
my $hex_integer = 0;
my $hex_float = 0;
my $bin_integer = 0;
my $bin_float = 0;
my $eval;

my @short_options;
sub arg($) {
	if ($#short_options == -1 && $#ARGV > -1 && $ARGV[0] eq $_[0]) {
		shift @ARGV;
		return 1;
	}
	return 0;
}
sub sarg($) {
	if ($#short_options > -1 && $short_options[0] eq $_[0]) {
		shift @short_options;
		return 1;
	}
	return 0;
}
while ($#ARGV > -1 || $#short_options > -1) {

	if ($#short_options == -1 && $ARGV[0] =~ /^-([a-zA-Z0-9]+)$/) {
		shift @ARGV;
		@short_options = split //, $1;
		next;
	}

	if (arg "--help") {
		usage *STDOUT, 0;
		next;
	}

	if (sarg "p" || arg "--pretty") {
		$pretty = 1;
		next;
	}

	if (arg "--root-name") {
		$root_name = 1;
		next;
	}

	if (arg "--type-name") {
		$type_name = 1;
		next;
	}

	if (arg "--type-key") {
		$type_key = 1;
		next;
	}

	if (arg "--flat-compound") {
		$flat_compound = 1;
		next;
	}

	if (arg "--flat-root") {
		$flat_root = 1;
		next;
	}

	if (arg "--flat-list") {
		$flat_list = 1;
		next;
	}

	if (arg "--hex-integer") {
		$hex_integer = 1;
		next;
	}

	if (arg "--hex-float") {
		$hex_float = 1;
		next;
	}

	if (arg "--bin-integer") {
		$bin_integer = 1;
		next;
	}

	if (arg "--bin-float") {
		$bin_float = 1;
		next;
	}

	if (sarg "e" || arg "--eval") {
		usage *STDERR, 1 unless $#ARGV > -1;
		$eval = shift @ARGV;
		next;
	}

	if (sarg "r" || arg "--readable") {
		$root_name = 1;
		$flat_compound = 1;
		$flat_root = 1;
		$flat_list = 1;
		next;
	}

	if (sarg "H" || arg "--hex") {
		$hex_integer = 1;
		$hex_float = 1;
		next;
	}

	if (sarg "B" || arg "--bin") {
		$bin_integer = 1;
		$bin_float = 1;
		next;
	}

	if (sarg "c" || arg "--readable-compound") {
		$type_name = 1;
		$type_key = 1;
		$flat_compound = 1;
		next;
	}

	usage *STDERR, 1;
}

#

my %types = (
	0 => ["end", "N", 0],
	1 => ["byte", "B", \&read_byte],
	2 => ["short", "S", \&read_short],
	3 => ["int", "I", \&read_int],
	4 => ["long", "L", \&read_long],
	5 => ["float", "F", \&read_float],
	6 => ["double", "D", \&read_double],
	7 => ["byte_array", "b", \&read_byte_array],
	8 => ["string", "T", \&read_string],
	9 => ["list", "A", \&read_list],
	10 => ["compound", "C", \&read_compound],
	11 => ["int_array", "i", \&read_int_array],
	12 => ["long_array", "l", \&read_long_array],
);

sub safe($) {
	return $_[0];
}

sub read_data($) {
	my $size = shift;
	if ($size == 0) {
		return "";
	} else {

		my $buffer;
		my $result = read(STDIN, $buffer, $size);

		die "Can not read from STDIN" if $result == 0;
		die "Can not read from STDIN" if ! defined $result;

		return $buffer;
	}
}

sub read_integer_1() {
	return unpack("c", read_data(1));
}

sub read_integer_2() {
	return unpack("s>", read_data(2));
}

sub read_integer_4() {
	return unpack("l>", read_data(4));
}

sub read_byte() {
	if ($hex_integer) {
		return "0x".unpack("H*", read_data(1));
	} elsif ($bin_integer) {
		return "0b".unpack("B*", read_data(1));
	} else {
		return unpack("c", read_data(1));
	}
}

sub read_short() {
	if ($hex_integer) {
		return "0x".unpack("H*", read_data(2));
	} elsif ($bin_integer) {
		return "0b".unpack("B*", read_data(2));
	} else {
		return unpack("s>", read_data(2));
	}
}

sub read_int() {
	if ($hex_integer) {
		return "0x".unpack("H*", read_data(4));
	} elsif ($bin_integer) {
		return "0b".unpack("B*", read_data(4));
	} else {
		return unpack("l>", read_data(4));
	}
}

sub read_long() {
	if ($hex_integer) {
		return "0x".unpack("H*", read_data(8));
	} elsif ($bin_integer) {
		return "0b".unpack("B*", read_data(8));
	} else {
		return unpack("q>", read_data(8));
	}
}

sub read_float() {
	if ($hex_float) {
		return "0x".unpack("H*", read_data(4));
	} elsif ($bin_float) {
		return "0b".unpack("B*", read_data(4));
	} else {
		my $data = read_data(4);
		return "0x".unpack("H*", $data)."=".sprintf("%.17g", unpack("f>", $data));
	}
}

sub read_double() {
	if ($hex_float) {
		return "0x".unpack("H*", read_data(8));
	} elsif ($bin_float) {
		return "0b".unpack("B*", read_data(8));
	} else {
		my $data = read_data(8);
		return "0x".unpack("H*", $data)."=".sprintf("%.17g", unpack("d>", $data));
	}
}

sub read_byte_array() {
	my $length = read_integer_4();
	die if $length < 0;
	my @values = map {
		read_byte();
	} 0 .. $length - 1;

	return \@values;
}

sub read_string() {
	my $length = read_integer_2();
	die if $length < 0;
	my $data = read_data($length);
	return decode("utf8", $data);
}

sub read_list() {
	my $type = read_integer_1();
	my $length = read_integer_4();
	die if $length < 0;
	my @values = map {
		read_payload($type);
	} 0 .. $length - 1;

	$type = $types{$type}->[0] if $type_name;

	if ($flat_list) {
		return \@values;
	} else {
		return {
			type => $type,
			values => \@values,
		};
	}
}

sub read_compound() {
	my @entries;
	while (1) {
		my $entry = read_entry();
		if ($entry->{type} == 0) {
			last;
		}
		$entry->{key} = $types{safe($entry->{type})}->[1].$entry->{key} if $type_key;
		$entry->{type} = $types{safe($entry->{type})}->[0] if $type_name;
		push @entries, $entry;
	}
	if ($flat_compound) {
		my %hash;
		for my $entry (@entries) {
			$hash{$entry->{key}} = $entry->{value};
		}
		return \%hash;
	} else {
		return \@entries;
	}
}

sub read_entry() {
	my $type = read_integer_1();
	if ($type == 0) {
		return {
			type => $type,
		};
	}
	my $key = read_string();
	my $value = read_payload($type);

	return {
		type => $type,
		key => $key,
		value => $value,
	};
}

sub read_int_array() {
	my $length = read_integer_4();
	die if $length < 0;
	my @values = map {
		read_int();
	} 0 .. $length - 1;

	return \@values;
}

sub read_long_array() {
	my $length = read_integer_4();
	die if $length < 0;
	my @values = map {
		read_long();
	} 0 .. $length - 1;

	return \@values;
}

sub read_payload($) {
	my $type = shift;
	my $a = $types{$type};
	die "Unknown Type: $type" if ! defined $a;
	return $a->[2]();
}

sub read_root() {
	my $entry = read_entry();
	$entry->{key} = "root" if $root_name;
	$entry->{key} = $types{safe($entry->{type})}->[1].$entry->{key} if $type_key;
	$entry->{type} = $types{safe($entry->{type})}->[0] if $type_name;
	if ($flat_root) {
		return {
			$entry->{key} => $entry->{value},
		};
	} else {
		return $entry;
	}
}

#

binmode STDIN;
my $json = JSON->new->canonical->ascii->allow_nonref;
$json = $json->indent->space_after if $pretty;
$_ = read_root();
if (defined $eval) {
	eval $eval;
	die if $@;
}
print $json->encode($_), "\n";
